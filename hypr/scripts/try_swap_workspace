#!/bin/bash

# Pascal Jaeger <pascal.jaeger@leimstift.de>

# utils
green="\033[0;32m"
red="\033[0;31m"
blue="\033[0;34m"
nocolor="\033[0m"

ok() {
  echo -e "[$green î®± $nocolor] $*"
}

help() {
  cat <<EOF
This is a bash script to move arbitrary workspace to arbritrary monitor and to swap workspaces between
monitors if the desired workspace is already active on a monitor for Hyprland using hyprctl.

flags:
  -h: Displays This help menu
  -c: Checks for all dependencies

Usage: try_swap_workspace [WORKSPACE]
bind = ALT,1,exec, /path/to/try_swap_workspace/binary 1
(where the last 1 is the workspace that should be shown on the currently active monitor)
EOF
}

getArgs() {
  while [ "$#" -gt 0 ]; do
    case "$1" in
      -h | --help)
        help
        exit 0
        ;;
      -c)
        checkUtils
        ;;
      (*name:*)
        switch_or_swap "$1"
        ;;
      (*[!0-9]*)
        # contains non-numbers
        help
        echo ""
        echo "Wrong argument given"
        exit 1
        ;;
      *)
        # only nubers left, so good
        switch_or_swap "$1"
        ;;
    esac
    shift
  done
}


# first argument: workspace to switch to
# second argument: monitor to switch workspace on
switch_workspace() {
  local target_wrkspc=$1
  hyprctl --batch -- \
    dispatch moveworkspacetomonitor "$target_wrkspc" current\; \
    dispatch workspace "$target_wrkspc"
}
# first argument: monitor the workspace should go to
# second argument: monitor the workspace is currently displayed on
swap_workspace() {
  local target_mon=$1
  local source_mon=$2
  # 1/ Focus the workspace on source_mon
  # 2/ Swap the workspaces. Focus will follow the workspace
  # 3/ Focus target_mon to avoid a buggy behavior where the correct
  # window is focused, but the previous workspace is focused.
  hyprctl --batch \
    dispatch focusmonitor "$source_mon"\; \
    dispatch swapactiveworkspaces "$target_mon" "$source_mon"\; \
    dispatch focusmonitor "$target_mon"
}

workspace_id() {
  local name=`echo $1 | sed 's/^name:\(.*\)$/\1/'`
  hyprctl workspaces -j | jq -r ".[] | select(.name==\"${name}\") | .id?"
}

# first argument: workspace to switch to active monitor
switch_or_swap() {
  target_wrkspc=$1

  local target_wrkspc_id=$1
  if [[ "$target_wrkspc" =~ ^name:.*$ ]]; then
    local target_wrkspc_id=`workspace_id "$target_wrkspc"`
  fi

  readarray -t active_items <<< `hyprctl monitors -j | jq -r "(.[] | select(.focused==true) | .name), (.[] | select(.activeWorkspace.id==${target_wrkspc}) | .name)"`
  target_mon=${active_items[0]}
  currently_active_on_mon=${active_items[1]}

  if [[ $currently_active_on_mon == "" ]]; then
    # workspace is not active on any monitor, do a normal switch
    ok "switching workspace $target_wrkspc to monitor $target_mon"
    switch_workspace "$target_wrkspc"
  elif [[ $target_mon != $currently_active_on_mon ]]; then
    # workspace is already active on other monitor, swap workspaces between monitor
    ok "swapping workspaces between $target_mon to monitor $currently_active_on_mon"
    swap_workspace "$target_mon" "$currently_active_on_mon"
  fi
}

main() {
  getArgs "$@"
}

main "$@"
